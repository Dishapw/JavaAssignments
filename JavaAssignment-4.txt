Q1.Write a program to show Interface Example in java?
→ 
interface Language {
  void getName(String name);
}


class ProgrammingLanguage implements Language {
  public void getName(String name) {
    System.out.println("Programming Language: " + name);
  }
}


class Main {
  public static void main(String[] args) {
    ProgrammingLanguage language = new ProgrammingLanguage();
    language.getName("Java");
  }
}


Output:
Programming Language: Java




Q3.Write a program to show the use of functional interface in java?
→
@FunctionalInterface
interface sayable{  
    void say(String msg);  
}  
class FunctionalInterfaceExample implements sayable{  
    public void say(String msg){  
        System.out.println(msg);  
    }  
    public static void main(String[] args) {  
        FunctionalInterfaceExample fie = new FunctionalInterfaceExample();  
        fie.say("Hello, How are u ?");  
    }  
}  


Output:
Hello, How are u ?




Q4.What is an interface in Java?
* → An interface is a type of abstract class that defines a set of methods without any implementation. 
* It only provides the signature of the methods, but not their actual implementation.
* In the case of interfaces,by default,all the variables are “public static final”.
* In interfaces,by default,all the methods are “public and abstract”.




Q5.What is the use of interface in Java?
→ There are mainly three reasons to use interface. They are given below.
* It is used to achieve abstraction.
* By interface, we can support the functionality of multiple inheritance.
* It can be used to achieve loose coupling.




Q6.What is the lambda expression of Java 8?
→ Lambda expression is a short block of code that accepts input as parameters and return the value.
We can also say that ,lambda expression is a type of function without a name.


Syntax for lambda expression:


         (parameter-list) → {body}
	Lambda expression is consisted of 3 components:
1. Argument-list: it can be empty or non-empty as well.
2. Arrow-token: it is used to link arguments-list and body of expression.
3. Body: it contains expressions and statements for lambda expression.




Q7.Can you pass lambda expressions to a method? When?
→ A lambda expression passed in a method that has an argument of type of functional interface. If we need to pass a lambda expression as an argument, the type of parameter receiving the lambda expression argument must be of a functional interface type.
In below example,the lambda expression can be passed in a method which argument's type is "TestInterface". 
Example:
interface TestInterface {
   boolean test(int a);
}
class Test {
     static boolean check(TestInterface ti, int b) {
      return ti.test(b);
   }
}
public class LambdaExpressionPassMethodTest {
   public static void main(String arg[]) {
            boolean result = Test.check((x) -> (x%2) == 0, 10);
      System.out.println("The result is: "+ result);
   }
}




Q8.What is the functional interface in Java 8?
→ A functional interface in Java 8 is an interface that can only have one abstract method. Functional interfaces are also referred to as SAM interfaces, or, Single Abstract Method interfaces. However, they can contain any number of default or static methods.
The @FunctionalInterface annotation is used to create a new functional interface. 




Q9.What is the benefit of lambda expressions in Java 8?
→ The benefits of lambda in Java:
* Lambda expressions improve code readability and do not require interpretation.
* Lambdas allow you to write concise code.
* It encourages the use of functional programming.
* It simplifies variable scope and encourages code reusability.
* Lambdas allow you to use parallel processing.




Q10.Is it mandatory for a lambda expression to have parameters?
→ No,it is not mandatory for a lambda expression to have parameters.