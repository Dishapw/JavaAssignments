Q1.Write a simple Banking System program by using OOPs concept where you can get account Holder name balance etc?
→
BankDetails.java
import java.util.Scanner;

class BankDetails {  
    private String accno;  
    private String name;  
    private String acc_type;  
    private long balance;  
    Scanner sc = new Scanner(System.in);
       
        public void openAccount() {  
        System.out.print("Enter Account No: ");  
        accno = sc.next();  
        System.out.print("Enter Account type: ");  
        acc_type = sc.next();  
        System.out.print("Enter Name: ");  
        name = sc.next();  
        System.out.print("Enter Balance: ");  
        balance = sc.nextLong();  
    }
  
      public void showAccount() {  
        System.out.println("Name of account holder: " + name);  
        System.out.println("Account no.: " + accno);  
        System.out.println("Account type: " + acc_type);  
        System.out.println("Balance: " + balance);  
    } 
  
    public void deposit() {  
        long amt;  
        System.out.println("Enter the amount you want to deposit: ");  
        amt = sc.nextLong();  
        balance = balance + amt;  
    } 
 
    public void withdrawal() {  
        long amt;  
        System.out.println("Enter the amount you want to withdraw: ");  
        amt = sc.nextLong();  
        if (balance >= amt) {  
            balance = balance - amt;  
            System.out.println("Balance after withdrawal: " + balance);  
        } else {  
            System.out.println("Your balance is less than " + amt + "\tTransaction failed...!!" );  
        }  
    }  

    public boolean search(String ac_no) {  
        if (accno.equals(ac_no)) {  
            showAccount();  
            return (true);  
        }  
        return (false);  
    }  
}  

BankingApp.java
import java.util.Scanner;


public class BankingApp {  
    public static void main(String arg[]) {  
        Scanner sc = new Scanner(System.in);  
      
        System.out.print("How many number of customers do you want to input? ");  
        int n = sc.nextInt();  
        BankDetails C[] = new BankDetails[n];  
        for (int i = 0; i < C.length; i++) {  
            C[i] = new BankDetails();  
            C[i].openAccount();  
        }  
        
        int ch;  
        do {  
            System.out.println("\n ***Banking System Application***");  
            System.out.println("1. Display all account details \n 2. Search by Account number\n 3. Deposit the amount \n 4. Withdraw the amount \n 5.Exit ");  
            System.out.println("Enter your choice: ");  
            ch = sc.nextInt();  
                switch (ch) {  
                    case 1:  
                        for (int i = 0; i < C.length; i++) {  
                            C[i].showAccount();  
                        }  
                        break;  
                    case 2:  
                        System.out.print("Enter account no. you want to search: ");  
                        String ac_no = sc.next();  
                        boolean found = false;  
                        for (int i = 0; i < C.length; i++) {  
                            found = C[i].search(ac_no);  
                            if (found) {  
                                break;  
                            }  
                        }  
                        if (!found) {  
                            System.out.println("Search failed! Account doesn't exist..!!");  
                        }  
                        break;  
                    case 3:  
                        System.out.print("Enter Account no. : ");  
                        ac_no = sc.next();  
                        found = false;  
                        for (int i = 0; i < C.length; i++) {  
                            found = C[i].search(ac_no);  
                            if (found) {  
                                C[i].deposit();  
                                break;  
                            }  
                        }  
                        if (!found) {  
                            System.out.println("Search failed! Account doesn't exist..!!");  
                        }  
                        break;  
                    case 4:  
                        System.out.print("Enter Account No : ");  
                        ac_no = sc.next();  
                        found = false;  
                        for (int i = 0; i < C.length; i++) {  
                            found = C[i].search(ac_no);  
                            if (found) {  
                                C[i].withdrawal();  
                                break;  
                            }  
                        }  
                        if (!found) {  
                            System.out.println("Search failed! Account doesn't exist..!!");  
                        }  
                        break;  
                    case 5:  
                        System.out.println("See you soon...");  
                        break;  
                }  
            }  
            while (ch != 5);  
        }  
}  

Output:
How many number of customers do you want to input? 2
Enter Account No: 101
Enter Account type: Savings
Enter Name: Jack
Enter Balance: 60000
Enter Account No: 102
Enter Account type: Current
Enter Name: Jennie
Enter Balance: 50000

 ***Banking System Application***
1. Display all account details
 2. Search by Account number
 3. Deposit the amount
 4. Withdraw the amount
 5.Exit
Enter your choice:
1
Name of account holder: Jack
Account no.: 101
Account type: Savings
Balance: 60000
Name of account holder: Jennie
Account no.: 102
Account type: Current
Balance: 50000

 ***Banking System Application***
1. Display all account details
 2. Search by Account number
 3. Deposit the amount
 4. Withdraw the amount
 5.Exit
Enter your choice:
2
Enter account no. you want to search: 104
Search failed! Account doesn't exist..!!

 ***Banking System Application***
1. Display all account details
 2. Search by Account number
 3. Deposit the amount
 4. Withdraw the amount
 5.Exit
Enter your choice:
3
Enter Account no. : 102
Name of account holder: Jennie
Account no.: 102
Account type: Current
Balance: 50000
Enter the amount you want to deposit:
15000

 ***Banking System Application***
1. Display all account details
 2. Search by Account number
 3. Deposit the amount
 4. Withdraw the amount
 5.Exit
Enter your choice:
2
Enter account no. you want to search: 102
Name of account holder: Jennie
Account no.: 102
Account type: Current
Balance: 65000

 ***Banking System Application***
1. Display all account details
 2. Search by Account number
 3. Deposit the amount
 4. Withdraw the amount
 5.Exit
Enter your choice:
4
Enter Account No : 101
Name of account holder: Jack
Account no.: 101
Account type: Savings
Balance: 60000
Enter the amount you want to withdraw:
5000
Balance after withdrawal: 55000

 ***Banking System Application***
1. Display all account details
 2. Search by Account number
 3. Deposit the amount
 4. Withdraw the amount
 5.Exit
Enter your choice:
5
See you soon...


Q2. Write a Program where you inherit method from parent class and show method Overridden Concept?
→ 
public class Vehicle {  
  void run(){
    System.out.println("Vehicle is running");
  }  
}  

class Car extends Vehicle{  
  void run(){
    System.out.println("Car is running safely");
  }  
  
  public static void main(String args[]){  
  Car obj = new Car(); 
  obj.run();
  }  
}

Output:
Car is running safely


Q3.Write a program to show run time polymorphism in java?
→
class Shape{  
     void draw(){
        System.out.println("drawing...");
    }  
}  

class Rectangle extends Shape{  
    void draw(){
        System.out.println("drawing a rectangle...");
    }  
}  

class Circle extends Shape{  
    void draw(){
        System.out.println("drawing a circle...");
    }  
}  

class Triangle extends Shape{  
    void draw(){
        System.out.println("drawing a triangle...");
    }  
} 

class TestPolymorphism2{  
public static void main(String args[]){  
Shape s;  
s=new Rectangle();  
s.draw();  
s=new Circle();  
s.draw();  
s=new Triangle();  
s.draw();  
}  
}  

Output:
drawing a rectangle...
drawing a circle...
drawing a triangle…


Q4.Write a program to show Compile time polymorphism in java?
→
class Addition { 
   void sum(int a, int b) 
  { 
    int c = a+b; 
    System.out.println("Sum of two numbers : " +c); 
  } 
  void sum(int a, int b, int e) 
  { 
    int c = a+b+e; 
    System.out.println("Sum of three numbers : " +c);
  } 
   public static void main(String[] args) { 
       Addition obj = new Addition(); 
       obj.sum ( 30,80); 
       obj.sum(45, 60, 22); 
    } 
}

Output:
Sum of two numbers : 110
Sum of three numbers : 127


Q5. Achieve loose coupling in java by using OOPs  concept?
→ we can achieve loose coupling in java by using interfaces.
interface Animal {
   void child();
}
class Cat implements Animal {
   public void child() {
      System.out.println("kitten");
   }
}
class Dog implements Animal {
   public void child() {
      System.out.println("puppy");
   }
}
public class LooseCoupling {
   public static void main(String args[]) {
      Animal obj = new Cat();
      obj.child();
   }
}

Output:
kitten


Q6. What is the benefit of encapsulation in java?
→ Benefits of Encapsulation:

Data Hiding: it is a way of restricting the access of our data members by hiding the implementation details. The user will have no idea about the inner implementation of the class. It will not be visible to the user how the class is storing values in the variables. The user will only know that we are passing the values to a setter method and variables are getting initialized with that value.

Increased Flexibility: Here, we can make the variables of the class as read-only or write-only depending on our requirement. In case you wish to make the variables as read-only then we have to omit the setter methods like setName(), setAge() etc. or if we wish to make the variables as write-only then we have to omit the get methods like getName(), getAge() etc. 

Reusability: It also improves the re-usability and easy to change with new requirements.


Q7.Is java a t 100% Object oriented Programming language? If no why ?
→ Java is not fully object oriented ,Because it supports primitive data types like int,float,double,which are not object oriented, and ofcourse is what opposite of OOP is.Thats why java is not 100% object oriented .


Q8.What are the advantages of abstraction in java?
→ Advantages of Abstraction:
1. It reduces the complexity of viewing things.
2. Avoids code duplication and increases reusability.
3. Helps to increase the security of an application or program as only essential details are provided to the user.
4. It improves the maintainability of the application. 
5. It improves the modularity of the application. 
6.  Improves code reusability and maintainability.
7. Provides a clear and simple interface to the user.


Q9.What is an abstraction explained with an Example?
→ Abstraction in Java is a process of hiding the implementation details from the user and showing only the functionality to the user. 
It can be achieve by using:
1. Abstract classes
2. Abstract methods
Example:
abstract class Car{  
    abstract void accelerate();  
}  
class Suzuki extends Car{  
    void accelerate(){
        System.out.println("Suzuki::accelerate");
     
    }
}
class Main{
    public static void main(String args[]){  
        Car obj = new Suzuki();   
        obj.accelerate();          
    }   
}  


Q10.What is the final class in Java?
→ The final class is a class that is declared with the final keyword. We can restrict class inheritance by making use of the final class. Final classes cannot be extended or inherited. If we try to inherit a final class, then the compiler throws an error during compilation.
The final keyword can be used with class method and variable.

Syntax:
    final class className {
           //body of class
   }
